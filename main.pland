var fs = require "fs";
var pathModule = require "path";
var os = require "os";
var cp = require('child_process');
var yaml = require('js-yaml');
var eshost = require 'eshost';

var folder = "./test262/test";

var CallbackErrorFirst = promiseland.CallbackErrorFirst;


var breakup = false;

function fsReadStr(path){
  var cb = new CallbackErrorFirst();
  fs.readFile(path, {encoding: "utf8"}, cb);
  return cb.promise;
};

function fsWrite(path, content){
  var cb = new CallbackErrorFirst();
  fs.writeFile(path, content, cb);
  return cb.promise;
};

var testEnvStr = *fsReadStr("./testenv.js");

var harnessess = {};
function getHarness(n){
  if (harnessess[n]){
    return harnessess[n];
  };
  harnessess[n] = *fsReadStr("./test262/harness/" + n);
  return harnessess[n];
};

var endsWith(s, c){
  if (s.substr(s.length - c.length, c.length) === c){
    return true;
  };
};



var runTest = function(path){
  //breakup = true;
  
  if (endsWith(path, "_FIXTURE.js")){
    console.log("ignoring " + path);
    return true;
  };
  
  console.log("running test " + path);
  
  var dataStr = *fsReadStr(path);
  //console.log("========================== source ==============================");
  //console.log(dataStr);
  //console.log("================================================================");
  
  var ystart = dataStr.indexOf("/*---");
  var yend = dataStr.indexOf("---*/");
  
  var yamlStr;
  if (ystart > -1 && yend > -1 && ystart < yend){
    ystart += 5;
    yamlStr = dataStr.substr(ystart, yend - ystart);
  }else{
    console.log("yaml not found");
    breakup = true;
    return;
  };
  
  //console.log("============================== yaml ============================");
  //console.log(yamlStr);
  //console.log("================================================================");
  
  // Get document, or throw exception on error 
  var doc;
  try {
    doc = yaml.safeLoad(yamlStr);
  } catch (e) {
    console.log(e);
    //breakup = true;
    return false;
  };
  
  var ignoreMember = {
    es5id: true,
    info: true,
    esid: true,
    es6id: true,
    features: true,
    author: true
  };
  var ignoreFlags = {
    onlyStrict: true // we are only testing strict mode
  };
  
  var i;
  var flags = [];
  var negative = false;
  
  var printSource = function(){
    console.log("========================== source ==============================");
    console.log(dataStr);
    console.log("================================================================");
  };
  
  var includesStr = "";
  var includesAr = [];
  var isModule = false;
  var isAsync = false;
  
  var member;
  for (member in doc){
    if (ignoreMember[member]){
      continue;
    };
    switch(member){
    case "description":
      description = doc[member];
      break;
    case "flags":
      {
        flags = doc[member];
        for (i = 0; i < flags.length; ++i){
          if (ignoreFlags[flags[i]]){
            continue;
          };
          if (flags[i] === "noStrict"){
            // we only do strict mode
            return true;
          };
          if (flags[i] === "raw"){
            // implies non strict mode, therfor no execution
            return true;
          };
          if (flags[i] === "module"){
            isModule = true;
            continue;
          };
          if (flags[i] === "generated"){
            // ?
            continue;
          };
          if (flags[i] == "async"){
            isAsync = true;
            continue;
          };
          /*switch (flags[i]){
            case 
          };*/
          printSource();
          console.log("unknown flag: " + flags[i]);
          breakup = true;
          return;
        };
      };
      break;
    case "negative":
      negative = doc[member];
      break;
      
    case "includes":
      includesAr = doc[member];
      break;
      
    default:
      printSource();
      console.log("unknown member: " + member);
      console.log(doc);
      breakup = true;
      return;
    };
  };
  for (i = 0; i < includesAr.length; ++i){
    includesStr += *getHarness(includesAr[i]);
  };
    
    var testContentStr = "";
    if (isModule){
    }else{
      testContentStr += "\"use strict\"\n";
      testContentStr += testEnvStr;
    };
    testContentStr += *getHarness("assert.js");
    testContentStr += *getHarness("sta.js");
    if (isAsync){
      testContentStr += *getHarness("doneprintHandle.js");
    };
    testContentStr += includesStr;
    if (isModule){
      testContentStr += "require(\"" + pathModule.resolve(__dirname, path) + "\");\n";
      console.log("module ------------------------------------------------------------------------");
    }else{
      //testContentStr += "(function(){\n\"use strict\";\n";
      testContentStr += dataStr;
      //testContentStr += "\n})();";
    };
      
      
  //console.log("running test");
      //console.log("================================================= raw test code =========================================================");
      //console.log(testContentStr);
      //console.log("=========================================================================================================================");
    
    var agent = *eshost.createAgent('node', { hostPath: os.homedir() + '/.nvm/versions/node/v7.7.1/bin/node' });

    try {
      var result = *agent.evalScript(testContentStr);
      if (!negative && result.error){
        printSource();
        console.log("test failed");
        console.log(result.error);
        //breakup = true;
        return false;
      };
      if (negative && !result.error){
        printSource();
        console.log("test failed");
        console.log("expected error but non ocured");
        //breakup = true;
        return false;
      };
      
      if (isAsync){
        //printSource();
        //console.log(testContentStr);
        console.log("async result:");
        console.log(result);
        if (result.stdout !== 'Test262:AsyncTestComplete\n'){
          console.log("test failed");
          return false;
        }
      };
      
      //console.log("test successful");
      return true;
      
      
    }catch(err){
      printSource();
      breakup = true;
      console.log("error running test");
      console.log(err);
      return false;
    };
  
};


function fsStat(path){
  var cb = new CallbackErrorFirst();
  fs.stat(path, cb);
  return cb.promise;
};
function fsReaddir(path){
  var cb = new CallbackErrorFirst();
  fs.readdir(path, {}, cb);
  return cb.promise;
};

var runTests = function(path){
  try{
    if (breakup){
      return;
    };
    var stat = *fsStat(path);
    if (stat.isDirectory()){
      var files = *fsReaddir(path);
      var i = 0;
      for (i = 0; i < files.length; ++i){
        *runTests(path + "/" + files[i]);
      };
    };
    if (stat.isFile()){
      if (path.substr(-3) == ".js"){
        *runTest(path);
      };
    };
  }catch(e){
    console.log(e);
    breakup = true;
  };
};
  

runTests(folder);
//  *runTest("./test262/test/language/statements/async-function/evaluation-body-that-throws-after-await.js");

